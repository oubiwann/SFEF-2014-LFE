(ns lfe.sample-code
    (:require [hoplon.reveal :refer [highlight]]))


(defn get-page-13-1 []
  (highlight
    ;;{{
    apply[fn;x;a] =
         [atom[fn] -> [eq[fn;CAR] -> caar[x];
                      eq[fn;CDR] -> cdar[x];
                      eq[fn;CONS] -> cons[car[x];cadr[x]];
                      eq[fn;ATOM] -> atom[car[x]];
                      eq[fn;EQ] -> eq[car[x];cadr[x]];
                      T -> apply[eval[fn;a];x;a]];
         eq[car[fn];LAMBDA] -> eval[caddr[fn];parlis[cadr[fn];x;a]];
         eq[car[fn];LABEL] -> apply[caddr[fn];x;cons[cons[cadr[fn];
                                   caddr[fn]];a]]]
    ;;}}
    ))

(defn get-page-13-2 []
  (highlight
    ;;{{
    eval[e;a] = [atom[e] -> cdr[assoc[e;a]];
         atom[car[e]] ->
          [eq[car[e],QUOTE] -> cadr[e];
          eq[car[e];COND] -> evcon[cdr[e];a];
          T -> apply[car[e];evlis[cdr[e];a];a]];
          T -> apply[car[e];evlis[cdr[e];a];a]]

    evcon[c;a] = [eval[caar[c];a] -> eval[cadar[c];a];
          T -> evcon[cdr[c];a]]

    evlis[m;a] = [null[m] -> NIL;
        T -> cons[eval[car[m];a];evlis[cdr[m];a]]]
    ;;}}
    ))

(defn get-parens-quote []
  (highlight :class "lisp"
    ;;{{
    (with more.
          (an English
              (but
                (with fewer parentheses
                      (a Lisp
                         (I think is not
                            (What the world needs)))))))
    ;;}}
    ))

(defn church-numerals []
  (highlight :class "lisp"
    ;;{{
    (defun zero ()
      (lambda (s)
        (lambda (x) x)))

    (defun one ()
      (lambda (s)
        (lambda (x)
          (funcall s x))))

    (defun two ()
      (lambda (s)
        (lambda (x)
          (funcall s
            (funcall s x)))))
    ;;}}
    ))

(defn async-http []
  (highlight :class "lisp"
    ;;{{
    (defun get-page (url)
      "Make a single HTTP request."
      (let* ((method 'get)
             (headers ())
             (request-data (tuple url headers))
             (http-options ())
             (request-options (list (tuple 'sync 'false))))
        (: httpc request method request-data http-options request-options)
        (receive
          ((tuple 'http (tuple request-id (tuple 'error reason)))
           (: io format '"Error: ~p~n" (list reason)))
          ((tuple 'http (tuple request-id result))
           (: io format '"Result: ~p~n" (list result))))))
    ;;}}
    ))

(defn messenger []
  (highlight :class "lisp"
    ;;{{
      (defmodule messenger-back
       (export all))

      (defun print-result ()
        (receive
          ((tuple pid msg)
            (: io format '"Received message: '~s'~n" (list msg))
            (: io format '"Sending message to process ~p ...~n" (list pid))
            (! pid (tuple msg))
            (print-result))))

      (defun send-message (calling-pid msg)
        (let ((spawned-pid (spawn 'messenger-back 'print-result ())))
          (! spawned-pid (tuple calling-pid msg))))
    ;;}}
    ))

(defn erlang-lfe-macros []
  (highlight
    ;;{{
    Macs = [['defmacro',Make,fds,
             ['let',[[def,[list|Defs]]],
              ?BQ([tuple,?Q(Name),?UQ_S([Fu,fds,def])])]],
            ['defmacro',Match,fds,
             ['let',[[def,[list|lists:duplicate(length(Fields),?Q('_'))]]],
              ?BQ([tuple,?Q(Name),?UQ_S([Fu,fds,def])])]],
            ['defmacro',Test,[rec],
              ?BQ(['is_record',?UQ(rec),?Q(Name),length(Fields)+1])],
            ...
    ;;}}
    ))

(defn numbers []
  (highlight :class "lisp"
    ;;{{
      > (+ 1 2 3 4 5 6)
      21
      > (- 6 21)
      15
      > (/ 36 7)
      5.142857142857143
      > (+ #b101010 #o52 #x2a #36r16)
      168
      > (* 42 4)
      168
      > (: erlang integer_to_list (+ #b1001 #b100 #b10) 2)
      "1111"
      > (div 11 2)
      5
      > (rem 11 2)
      1
    ;;}}
    ))

(defn atoms-and-strings []
  (highlight :class "lisp"
    ;;{{
      > 'Vogon
      Vogon
      > '|and now with hyperspace bypasses|
      |and now with hyperspace bypasses|
      > '"Don't Panic."
      "Don't Panic."
      > (list 68 111 110 39 116 32 80 97 110 105 99 46)
      "Don't Panic."
    ;;}}
    ))

(defn bit-pack []
  (highlight :class "lisp"
    ;;{{
      > (set red 2)
      2
      > (set green 61)
      61
      > (set blue 20)
      20
      > (binary
          (red (size 5))
          (green (size 6))
          (blue (size 5)))
      #B(23 180)
    ;;}}
    ))

(defn bit-unpack []
  (highlight :class "lisp"
    ;;{{
      > (let (((binary (r (size 5)) (g (size 6)) (b (size 5)))
               #b(23 180)))
             (: io format '"~p ~p ~p~n" (list r g b)))
      2 61 20
      ok
      ;;}}
      ))

(defn lists-1 []
  (highlight :class "lisp"
    ;;{{
      > (list 1 3 9 27)
      (1 3 9 27)
      > '(1 3 9 27)
      (1 3 9 27)
      > (: erlang length '(1 2 3 4 5 6 7))
      7
      > (: lists append '(1 2) '(3 4))
      (1 2 3 4)
      > (: lists append (list '(1 2) '(3 4) '(5 6)))
      (1 2 3 4 5 6)
      ;;}}
      ))

(defn lists-2 []
  (highlight :class "lisp"
    ;;{{
      > (car '(1 2 3 4 5 6))
      1
      > (cdr '(1 2 3 4 5 6))
      (2 3 4 5 6)
      > (cadr '(1 2 3 4 5 6))
      2
      > (cddr '(1 2 3 4 5 6))
      (3 4 5 6)
      > (cons '(1 2 3) '(4 5 6))
      ((1 2 3) 4 5 6)
      ;;}}
      ))

(defn records-1 []
  (highlight :class "lisp"
    ;;{{
      (defrecord person
        name
        address
        age)
      ;;}}
  ))

(defn records-2 []
  (highlight :class "lisp"
    ;;{{
      > (set ford
          (make-person name '"Ford Prefect"
                       address '"Betelgeuse Seven"
                       age 234))
      #(person "Ford Prefect" "Betelgeuse Seven" 234)
      ;;}}
  ))

(defn records-3 []
  (highlight :class "lisp"
    ;;{{
      > (person-name ford)
      "Ford Prefect"
      > (set ford
          (set-person-age ford 244))
      #(person "Ford Prefect" "Betelgeuse Seven" 244)
      > (person-age ford)
      244
      ;;}}
  ))

(defn patterns-1 []
  (highlight :class "lisp"
    ;;{{
      > (let (((tuple len status data) #(8 ok "Trillian")))
             (list len status data))
      (8 ok "Trillian")
    ;;}}
    ))

(defn patterns-2 []
  (highlight :class "lisp"
    ;;{{
      > (case data
          ((tuple len 'ok msg)
            (: io format '"~s seems good.~n" (list msg)))
          ((tuple len 'err msg)
            (: io format '"There's a problem with ~s.~n" (list msg)))
          ((tuple len 'warn msg)
            (: io format '"Be careful of ~s.~n" (list msg))))
      Be careful of Arthur.
      ok
    ;;}}
    ))

(defn patterns-3 []
  (highlight :class "lisp"
    ;;{{
      (cond ((?= (tuple len 'ok msg) data)
             (: io format '"~s seems good.~n" (list msg)))
            ((?= (tuple len 'err msg) data)
             (: io format '"There's a problem with ~s.~n" (list msg)))
            ((?= (tuple len 'warn msg) data)
             (: io format '"Be careful of ~s.~n" (list msg))))
    ;;}}
    ))

(defn patterns-4 []
  (highlight :class "lisp"
    ;;{{
      (defun safety-check
        (('ok msg)
          (: io format '"~s seems good.~n" (list msg)))
        (('warn msg)
          (: io format '"There's a problem with ~s.~n" (list msg)))
        (('crit msg)
          (: io format '"Be careful of ~s.~n" (list msg))))
    ;;}}
    ))

(defn patterns-5 []
  (highlight :class "lisp"
    ;;{{
      (defun safety-check ()
        (receive
          ((tuple 'ok item)
            (: io format '"~s is safe to approach.~n" (list item))
            (safety-check))
          ((tuple 'warn item)
            (: io format '"Approach ~s with extreme caution.~n" (list item))
            (safety-check))
          ((tuple 'crit item)
            (: io format '"Withdraw from ~s immediately!~n" (list item))
            (safety-check))))
    ;;}}
    ))

(defn macros-1 []
  (highlight :class "lisp"
    ;;{{
      (defmacro deftest arg
        (let ((name (car arg))
              (body (cdr arg)))
          `(defun ,(list_to_atom (++ (atom_to_list name) '"_test")) ()
             ,@body)))
    ;;}}
    ))

(defn macros-2 []
  (highlight :class "lisp"
    ;;{{
      (defun is-equal_test ()
        (is-equal 1 1)
        (is-equal 1 (+ 1 0))
        (is-equal 1 (- 2 1)))
    ;;}}
    ))

(defn macros-3 []
  (highlight :class "lisp"
    ;;{{
      (deftest is-equal
        (is-equal 1 1)
        (is-equal 1 (+ 1 0))
        (is-equal 1 (- 2 1)))
    ;;}}
    ))

(defn install-lfe []
  (highlight :class "bash"
    ;;{{
      $ cd ~/lab
      $ git clone https://github.com/rvirding/lfe.git
      $ cd lfe && make compile
      $ ERL_LIBS=you_lib_path make install
      $ cp bin/* /usr/local/bin/
    ;;}}
    ))

(defn install-lfetool []
  (highlight :class "bash"
    ;;{{
      $ cd ~/
      $ curl -o ./lfetool https://raw.github.com/lfe/lfetool/master/lfetool
      $ bash ./lfetool install /usr/local/bin
      $ rm ./lfetool
    ;;}}
    ))

(defn update-lfetool []
  (highlight :class "bash"
    ;;{{
      $ lfetool update
      % Total  % Received % Xferd  Average Speed   Time    Time    Time  Current
                                   Dload   Upload  Total   Spent   Left  Speed
    100 11895  100 11895  0     0  19835      0 --:--:-- --:--:-- --:--:-- 61632

    Updated lfetool at /usr/local/bin/lfetool.
    ;;}}
    ))

(defn create-a-script []
  (highlight :class "bash"
    ;;{{
      $ lfetool new script fibo
      $ ./fibo 42
      factorial 42 = 1405006117752879898543142606244511569936384000000000
    ;;}}
    ))

(defn script-guts []
  (highlight :class "lisp"
    ;;{{
      #! /usr/bin/env lfescript
      ;; -*- mode: lfe -*-
      ;;! -smp enable -sname factorial -mnesia debug verbose
      (defun main
        (((list string))
          (try
            (let* ((n (list_to_integer string))
                    (f (fac n)))
               (: lfe_io format '"factorial ~w = ~w\n" (list n f)))
            (catch
              ((tuple _ _ _) (usage)))))
          ((_) (usage)))

      (defun fac
        ((0) 1)
        ((n) (* n (fac (- n 1)))))

      (defun usage ()
        (let ((script-name (: escript script_name)))
          (: lfe_io format '"usage: ~s <integer>\n" (list script-name))))
    ;;}}
    ))

(defn library-1 []
  (highlight :class "bash"
    ;;{{
      $ lfetool new library my-lib
      $ find my-lib -type f|egrep -v 'deps|.git|.beam'
      my-lib/ebin/my-lib.app
      my-lib/Makefile
      my-lib/package.exs
      my-lib/README.rst
      my-lib/rebar.config
      my-lib/src/my-lib.app.src
      my-lib/src/my-lib.lfe
      my-lib/test/my-lib_tests.lfe
    ;;}}
    ))

(defn library-2 []
  (highlight :class "lisp"
    ;;{{
    (defmodule my-lib
      (export all))

    (defun my-adder (x y)
      (+ x (+ y 1)))
    ;;}}
    ))

(defn library-3 []
  (highlight :class "lisp"
    ;;{{
      (defmodule my-lib_tests
        (export all))

      (include-lib "deps/lfeunit/include/lfeunit-macros.lfe")

      (deftest my-adder
        (is-equal 4 (: my-lib my-adder 2 2)))
    ;;}}
    ))

(defn service-1 []
  (highlight :class "bash"
    ;;{{
      $ lfetool new service my-svc
      $ find my-svc -type f|egrep -v 'deps|.git|.beam'
      my-svc/ebin/my-svc.app
      my-svc/Makefile
      my-svc/package.exs
      my-svc/README.rst
      my-svc/rebar.config
      my-svc/src/my-svc.app.src
      my-svc/src/my-svc_app.lfe
      my-svc/src/my-svc_server.lfe
      my-svc/src/my-svc_sup.lfe
      my-svc/test/my-svc_tests.lfe
    ;;}}
    ))

(defn service-2 []
  (highlight :class "lisp"
    ;;{{
      (defmodule my-svc_app
        (behaviour application)
        (export (start 2)
                (stop 1)))

      (defun start (type args)
        (let ((result (: my-svc_sup start_link)))
          (case result
            ((tuple 'ok pid)
              result)
            (_
              (tuple 'error result)))))

      (defun stop (state)
        'ok)
    ;;}}
    ))

(defn service-3 []
  (highlight :class "bash"
    ;;{{
      $ cd my-svc
      $ make shell
      ...
      LFE Shell V5.10.4 (abort with ^G)
      >
    ;;}}
    ))

(defn service-4 []
  (highlight :class "lisp"
    ;;{{
      > (: application start 'my-svc)
      ok
      > (: my-svc_server test-call '"Testing a call ...")
      Call: "Testing a call ..."
      ok
      > (: my-svc_server test-cast '"Testing a cast ...")
      ok
      Cast: "Testing a cast ..."
    ;;}}
    ))

(defn service-5 []
  (highlight :class "lisp"
    ;;{{
      (defun start_link ()
        (: gen_server start_link
           (tuple 'local (server-name)) (module-name) '() '()))

      (defun test-call (message)
        (: gen_server call
           (server-name) (tuple 'test message)))

      (defun test-cast (message)
        (: gen_server cast
           (server-name) (tuple 'test message)))
    ;;}}
    ))

(defn cloud-1 []
  (highlight :class "bash"
    ;;{{
      $ lfetool new library cloudy
      $ cd cloudy
      $ vi rebar.config
      $ vi Makefile
    ;;}}
    ))

(defn aws-deps-1 []
  (highlight :class "erlang"
    ;;{{
      {deps, [
         ...
         {erlcloud, ".*", {git, "git://github.com/gleber/erlcloud.git"}}
  ]}.
    ;;}}
    ))

(defn aws-deps-2 []
  (highlight :class "makefile"
    ;;{{
      JSX_DIR = $(DEPS)/jsx
      ERLCLOUD_DIR = $(DEPS)/erlcloud
      ERL_LIBS1 = $(LFE_DIR):$(LFE_UTILS_DIR):$(LFEUNIT_DIR)
      ERL_LIBS2 = $(ERLCLOUD_DIR):$(JSX_DIR):./
      ERL_LIBS = $(ERL_LIBS1):$(ERL_LIBS2)
    ;;}}
    ))

(defn aws-1 []
  (highlight :class "lisp"
    ;;{{
      (defmodule cloudy
        (export all))

      (include-lib "deps/erlcloud/include/erlcloud_ec2.hrl")

      (defun run-aws-instance (ami)
        (: ssl start)
        (: erlcloud start)
        (let ((instance-config (make-ec2_instance_spec
                                 image_id ami)))
          (: erlcloud_ec2 run_instances instance-config)))
    ;;}}
    ))

(defn aws-2 []
  (highlight :class "bash"
    ;;{{
      $ export AWS_ACCESS_KEY_ID=ASDFG1234
      $ export AWS_SECRET_ACCESS_KEY=QWERT2345
      $ make shell
    ;;}}
    ))

(defn aws-3 []
  (highlight :class "lisp"
    ;;{{
> (slurp '"src/cloudy.lfe")
> (run-aws-instance '"ami-2be4d942")
#(ok
  (#(reservation_id "r-26d4a907")
   #(owner_id "1234567")
   #(group_set ("sg-e77a968e"))
   #(instances_set
     ((#(instance_id "i-ba83d19b")
       #(image_id "ami-2be4d942")
       #(instance_state (#(code 0) #(name "pending")))
       ...
    ;;}}
    ))

(defn rax-deps-1 []
  (highlight :class "erlang"
    ;;{{
      {deps, [
         ...
         {lferax, ".*", {git, "git://github.com/lfe/lfe-rackspace.git"}}
  ]}.
    ;;}}
    ))

(defn rax-deps-2 []
  (highlight :class "makefile"
    ;;{{
      LFERAX_DIR = $(DEPS)/lferax
      OPENSTACK_DIR = $(DEPS)/openstack
      JIFFY_DIR = $(DEPS)/jiffy
      EJ_DIR = $(DEPS)/ej
      REST_CLIENT_DIR=$(DEPS)/lfe-rest-client
      # Note that ERL_LIBS is for running this project in development and that
      # ERL_LIB is for installation.
      ERL_LIBS1 = $(LFE_DIR):$(LFE_UTILS_DIR):$(LFEUNIT_DIR)
      ERL_LIBS2 = $(ERLCLOUD_DIR):$(JSX_DIR):$(LFERAX_DIR):$(OPENSTACK_DIR)
      ERL_LIBS3 = $(JIFFY_DIR):$(EJ_DIR):$(REST_CLIENT_DIR):./
      ERL_LIBS = $(ERL_LIBS1):$(ERL_LIBS2):$(ERL_LIBS3)
    ;;}}
    ))

(defn rax-deps-3 []
  (highlight :class "makefile"
    ;;{{
      compile: get-deps clean-ebin
        rebar compile
        cd $(JIFFY_DIR) && rebar compile
    ;;}}
    ))

(defn rax-1 []
  (highlight :class "lisp"
    ;;{{
      (defun run-rax-instance (image-id)
        (let* ((auth-data (: lferax-identity login))
               (region '"DFW")
               (flavors-list (: lferax-servers get-flavors-list
                               auth-data region))
               (flavor-id (: lferax-servers get-id
                            '"30 GB Performance"
                            flavors-list)))
          (: lferax-servers create-server
            auth-data region '"my-new-server" image-id flavor-id)))
    ;;}}
    ))

(defn rax-2 []
  (highlight :class "bash"
    ;;{{
      $ export RAX_USERNAME=alice
      $ export RAX_APIKEY=1234abcd
      $ make shell
    ;;}}
    ))

(defn rax-3 []
  (highlight :class "lisp"
    ;;{{
> (slurp '"src/cloudy.lfe")
#(ok cloudy)
> (run-rax-instance '"80fbcb55-b206-41f9-9bc2-2dd7aac6c061")
#(ok
  #(#("HTTP/1.1" 202 "Accepted")
    (#("date" "Sun, 23 Feb 2014 21:55:39 GMT")
     #("via" "1.1 Repose (Repose/2.12)")
     #("location"
       "https://dfw.servers.api.rackspacecloud.com/v2/123/servers/456")
     #("server" "Jetty(8.0.y.z-SNAPSHOT)")
     #("content-length" "380")
     #("content-type" "application/json")
     #("x-compute-request-id" "req-1c180f0f-062f-4576-b316-4072eb1a4a83"))
    ...
    ;;}}
    ))

(defn rest-deps-1 []
  (highlight :class "erlang"
    ;;{{
      {deps, [
         ...
         {yaws, ".*", {git, "git://github.com/klacke/yaws.git"}}
        ]}.
    ;;}}
    ))

(defn rest-deps-2 []
  (highlight :class "bash"
    ;;{{
      $ make get-deps
      $ make compile
    ;;}}
    ))

(defn rest-deps-3 []
  (highlight :class "makefile"
    ;;{{
      ETC_DIR = ./etc
      ...
      YAWS_DIR = $(DEPS)/yaws
      YAWS = $(YAWS_DIR)/bin/yaws
      YAWS_CONF = $(ETC_DIR)/yaws.conf
      YAWS_SERVER_ID = cloudyrest
      ERL_LIBS1 = $(LFE_DIR):$(LFE_UTILS_DIR):$(LFEUNIT_DIR)
      ERL_LIBS2 = $(ERLCLOUD_DIR):$(JSX_DIR):$(LFERAX_DIR):$(OPENSTACK_DIR)
      ERL_LIBS3 = $(JIFFY_DIR):$(EJ_DIR):$(REST_CLIENT_DIR):$(YAWS_DIR):./
      ERL_LIBS = $(ERL_LIBS1):$(ERL_LIBS2):$(ERL_LIBS3)
    ;;}}
    ))

(defn rest-targets []
  (highlight :class "makefile"
    ;;{{
      yaws-dev: compile-no-deps
        @ERL_LIBS=$(ERL_LIBS) $(YAWS) -i \
        --conf $(YAWS_CONF) --id $(YAWS_SERVER_ID)
    ;;}}
    ))

(defn yaws-dirs []
  (highlight :class "bash"
    ;;{{
      $ mkdir etc logs www
    ;;}}
    ))

(defn yaws-conf []
  (highlight :class "apache"
    ;;{{
      logdir = logs
      ebin_dir = deps/yaws/var/yaws/ebin
      ebin_dir = ebin
      log_resolve_hostname = false
      fail_on_bind_err = true

      <server localhost>
              port = 5099
              listen = 0.0.0.0
              appmods = </, cloudy>
              docroot = www
      </server>
    ;;}}
    ))

(defn yaws-rest-entry []
  (highlight :class "lisp"
    ;;{{
      (defun out (arg-data)
        "This function is executed by YAWS. It is the YAWS entry point for our
        RESTful service."
        (let ((method-name (get-http-method arg-data))
              (path-info (: string tokens
                            (parse-path arg-data)
                            '"/")))
          (routes path-info method-name arg-data)))
    ;;}}
    ))

(defn yaws-rest-routes []
  (highlight :class "lisp"
    ;;{{
      (defun routes
        "Routes for the Volvoshop REST API."
        (((list '"order") method arg-data)
         (order-api method arg-data))
        (((list '"order" order-id) method arg-data)
         (order-api method order-id arg-data))
        (((list '"orders") method arg-data)
         (orders-api method arg-data))
        (((list '"payment" '"order" order-id) method arg-data)
         (payment-api method order-id arg-data))
        ((path method arg)
          (: io format
            '"Unmatched route!~n Path-info: ~p~n method: ~p~n arg-data: ~p~n~n"
            (list path method arg))
          (make-json-error-response '"Unmatched route.")))
    ;;}}
    ))

(defn yaws-rest-api-order-1 []
  (highlight :class "lisp"
    ;;{{
      (defun order-api
        "The order API for methods without an order id."
        (('POST arg-data)
         (make-json-data-response '"You made a new order.")))
    ;;}}
    ))

(defn yaws-rest-api-order-2 []
  (highlight :class "lisp"
    ;;{{
      (defun order-api
        "The order API for methods with an order id."
        (('GET order-id arg-data)
         (make-json-data-response (++ '"You got the status for order "
                                      order-id '".")))
        (('PUT order-id arg-data)
         (make-json-data-response (++ '"You updated order " order-id '".")))
        (('DELETE order-id arg-data)
         (make-json-data-response (++ '"You deleted an order " order-id '"."))))
    ;;}}
    ))

(defn yaws-rest-api-orders []
  (highlight :class "lisp"
    ;;{{
      (defun orders-api
        "The orders API."
        (('GET arg-data)
         (make-json-data-response '"You got a list of orders.")))
    ;;}}
    ))

(defn yaws-rest-api-payment []
  (highlight :class "lisp"
    ;;{{
      (defun payment-api
        "The payment API."
        (('GET order-id arg-data)
         (make-json-data-response '"You got the payment status of an order."))
        (('PUT order-id arg-data)
         (make-json-data-response '"You paid for an order.")))
    ;;}}
    ))

(defn yaws-rest-utils []
  (highlight :class "lisp"
    ;;{{
      (include-lib "yaws/include/yaws_api.hrl")
      ...
      (defun parse-path (arg-data)
        (arg-pathinfo arg-data))

      (defun get-http-method (arg-data)
        (let ((record (arg-req arg-data)))
          (http_request-method record)))

      (defun make-json-response (data)
        (tuple 'content '"application/json"data))

      (defun make-json-data-response (data)
        (make-json-response (++ '"{\"data\": \"" data '"\"}")))

      (defun make-json-error-response (error)
        (make-json-response (++ '"{\"error\": \"" error '"\"}")))
    ;;}}
    ))

(defn curl-check-1 []
  (highlight :class "bash"
    ;;{{
      $ curl -D- -X POST http://localhost:5099/order
      HTTP/1.1 200 OK
      Server: Yaws 1.98
      Date: Mon, 24 Feb 2014 01:45:13 GMT
      Content-Length: 33
      Content-Type: application/json

      {"data": "You made a new order."}
    ;;}}
    ))

(defn curl-check-2 []
  (highlight :class "bash"
    ;;{{
      $ curl -D- -X GET http://localhost:5099/order/1234
      HTTP/1.1 200 OK
      Server: Yaws 1.98
      Date: Mon, 24 Feb 2014 01:45:42 GMT
      Content-Length: 46
      Content-Type: application/json

      {"data": "You got the status for order 1234."}
    ;;}}
    ))

(defn curl-check-3 []
  (highlight :class "bash"
    ;;{{
      $ curl -D- -X PUT http://localhost:5099/order/1234
      HTTP/1.1 200 OK
      Server: Yaws 1.98
      Date: Mon, 24 Feb 2014 01:45:51 GMT
      Content-Length: 35
      Content-Type: application/json

      {"data": "You updated order 1234."}
    ;;}}
    ))

(defn curl-check-4 []
  (highlight :class "bash"
    ;;{{
      $ curl -D- -X GET http://localhost:5099/orders
      HTTP/1.1 200 OK
      Server: Yaws 1.98
      Date: Mon, 24 Feb 2014 01:46:05 GMT
      Content-Length: 37
      Content-Type: application/json

      {"data": "You got a list of orders."}
    ;;}}
    ))

(defn curl-check-5 []
  (highlight :class "bash"
    ;;{{
      $ curl -D- -X GET http://localhost:5099/payment/order/1234
      HTTP/1.1 200 OK
      Server: Yaws 1.98
      Date: Mon, 24 Feb 2014 01:47:00 GMT
      Content-Length: 51
      Content-Type: application/json

      {"data": "You got the payment status of an order."}
    ;;}}
    ))

(defn curl-check-6 []
  (highlight :class "bash"
    ;;{{
      $ curl -D- -X PUT http://localhost:5099/payment/order/1234
      HTTP/1.1 200 OK
      Server: Yaws 1.98
      Date: Mon, 24 Feb 2014 01:47:19 GMT
      Content-Length: 34
      Content-Type: application/json

      {"data": "You paid for an order."}
    ;;}}
    ))

(defn curl-check-7 []
  (highlight :class "bash"
    ;;{{
      $ curl -D- -X DELETE http://localhost:5099/order/1234
      HTTP/1.1 200 OK
      Server: Yaws 1.98
      Date: Mon, 24 Feb 2014 01:47:36 GMT
      Content-Length: 38
      Content-Type: application/json

      {"data": "You deleted an order 1234."}
    ;;}}
    ))

(defn lfe-hop []
  (highlight :class "lisp"
    ;;{{
      (defun run ()
        (let* ((bob (make-entity name '"Bob" location '"home" cash-total 10))
               (state (store (entity-name bob) bob (new-dict)))
               (taxi (make-entity name '"Taxi" location '"downtown"))
               (state (store (entity-name taxi) taxi state)))
          (: lfe-hop find-plan
             state
             (tasks)
             (operators)
             (methods))))
    ;;}}
    ))

(defn lfe-rebar-1 []
  (highlight :class "lisp"
    ;;{{
      (defun run-in-basedir (config app-file)
        "We only want to execute this function when the plugin is running
        in the base directory."
       (case (base-dir? config)
         ('true (: io format '"Just ran the 'run-in-basedir' plugin cmd!~n"))
         ('false 'ok)))
    ;;}}
    ))

(defn lfe-rebar-2 []
  (highlight :class "lisp"
    ;;{{
      (defun run-in-other-dirs (config app-file)
        "We want to execute this function whenever the plugin is not running
        in the base directory."
       (case (not (base-dir? config))
         ('true (: io format '"Just ran the 'run-in-other-dirs' plugin cmd!~n"))
         ('false 'ok)))
    ;;}}
    ))

(defn lfe-rebar-3 []
  (highlight :class "bash"
    ;;{{
      $ rebar run-in-basedir
      ==> lfe (run-in-basedir)
      ==> lfeunit (run-in-basedir)
      ==> lfe-utils (run-in-basedir)
      ==> rebar (run-in-basedir)
      ==> lfe-sample-rebar-plugin (run-in-basedir)
      Just ran the 'run-in-basedir' plugin command!
    ;;}}
    ))

(defn lfe-rebar-4 []
  (highlight :class "bash"
    ;;{{
      $ rebar run-in-other-dirs
      ==> lfe (run-in-other-dirs)
      Just ran the 'run-in-other-dirs' plugin command!
      ==> lfeunit (run-in-other-dirs)
      Just ran the 'run-in-other-dirs' plugin command!
      ==> lfe-utils (run-in-other-dirs)
      Just ran the 'run-in-other-dirs' plugin command!
      ==> rebar (run-in-other-dirs)
      Just ran the 'run-in-other-dirs' plugin command!
      ==> lfe-sample-rebar-plugin (run-in-other-dirs)
    ;;}}
    ))

(defn ga-1 []
  (highlight :class "lisp"
    ;;{{
      > (: gp-util test-form)
      (quote 10 4)
      > (: gp-util test-form)
      ((+ - * /) =input= 5)
    ;;}}
    ))

(defn ga-2 []
  (highlight :class "lisp"
    ;;{{
      > (: gp-util test-form)
      ((+ - * /)
       (quote 2 3)
       (quote
        ((+ - * /)
         (quote
          (quote 10 (quote (quote =input= =input=) =input=))
          (quote =input= (quote (quote =input= 7) ((+ - * /) =input= =input=))))
         =input=)
        3))
    ;;}}
    ))

(defn XXX []
  (highlight
    ;;{{

    ;;}}
    ))

(defn YYY []
  (highlight
    ;;{{
    ;;}}
    ))





