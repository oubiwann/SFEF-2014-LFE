(ns lfe.sample-code
    (:require [hoplon.reveal :refer [highlight]]))


(defn get-page-13 []
  (highlight
    ;;{{
    apply[fn;x;a] =
         [atom[fn] -> [eq[fn;CAR] -> caar[x];
                      eq[fn;CDR] -> cdar[x];
                      eq[fn;CONS] -> cons[car[x];cadr[x]];
                      eq[fn;ATOM] -> atom[car[x]];
                      eq[fn;EQ] -> eq[car[x];cadr[x]];
                      T -> apply[eval[fn;a];x;a]];
         eq[car[fn];LAMBDA] -> eval[caddr[fn];parlis[cadr[fn];x;a]];
         eq[car[fn];LABEL] -> apply[caddr[fn];x;cons[cons[cadr[fn];
                                   caddr[fn]];a]]]

    eval[e;a] = [atom[e] -> cdr[assoc[e;a]];
         atom[car[e]] ->
          [eq[car[e],QUOTE] -> cadr[e];
          eq[car[e];COND] -> evcon[cdr[e];a];
          T -> apply[car[e];evlis[cdr[e];a];a]];
          T -> apply[car[e];evlis[cdr[e];a];a]]

    evcon[c;a] = [eval[caar[c];a] -> eval[cadar[c];a];
          T -> evcon[cdr[c];a]]

    evlis[m;a] = [null[m] -> NIL;
        T -> cons[eval[car[m];a];evlis[cdr[m];a]]]
    ;;}}
    ))

(defn get-parens-quote []
  (highlight
    ;;{{
    (with more.
          (an English
              (but
                (with fewer parentheses
                      (a Lisp
                         (I think is not
                            (What the world needs)))))))
    ;;}}
    ))


(defn church-numerals []
  (highlight
    ;;{{
    (defun zero ()
      (lambda (s)
        (lambda (x) x)))

    (defun one ()
      (lambda (s)
        (lambda (x)
          (funcall s x))))

    (defun two ()
      (lambda (s)
        (lambda (x)
          (funcall s
            (funcall s x)))))
    ;;}}
    ))

(defn async-http []
  (highlight
    ;;{{
    (defun get-page (url)
      "Make a single HTTP request."
      (let* ((method 'get)
             (headers ())
             (request-data (tuple url headers))
             (http-options ())
             (request-options (list (tuple 'sync 'false))))
        (: httpc request method request-data http-options request-options)
        (receive
          ((tuple 'http (tuple request-id (tuple 'error reason)))
           (: io format '"Error: ~p~n" (list reason)))
          ((tuple 'http (tuple request-id result))
           (: io format '"Result: ~p~n" (list result))))))
    ;;}}
    ))

(defn messenger []
  (highlight
    ;;{{
    (defun get-page (url)
      "Make a single HTTP request."
      (let* ((method 'get)
             (headers ())
             (request-data (tuple url headers))
             (http-options ())
             (request-options (list (tuple 'sync 'false))))
        (: httpc request method request-data http-options request-options)
        (receive
          ((tuple 'http (tuple request-id (tuple 'error reason)))
           (: io format '"Error: ~p~n" (list reason)))
          ((tuple 'http (tuple request-id result))
           (: io format '"Result: ~p~n" (list result))))))
    ;;}}
    ))

(defn erlang-lfe-macros []
  (highlight
    ;;{{
    Macs = [['defmacro',Make,fds,
             ['let',[[def,[list|Defs]]],
              ?BQ([tuple,?Q(Name),?UQ_S([Fu,fds,def])])]],
            ['defmacro',Match,fds,
             ['let',[[def,[list|lists:duplicate(length(Fields),?Q('_'))]]],
              ?BQ([tuple,?Q(Name),?UQ_S([Fu,fds,def])])]],
            ['defmacro',Test,[rec],
              ?BQ(['is_record',?UQ(rec),?Q(Name),length(Fields)+1])],
            ...
    ;;}}
    ))

(defn numbers []
  (highlight
    ;;{{
      > (+ 1 2 3 4 5 6)
      21
      > (- 6 21)
      15
      > (/ 36 7)
      5.142857142857143
      > (+ #b101010 #o52 #x2a #36r16)
      168
      > (* 42 4)
      168
      > (: erlang integer_to_list (+ #b1001 #b100 #b10) 2)
      "1111"
      > (div 11 2)
      5
      > (rem 11 2)
      1
      >
    ;;}}
    ))

(defn atoms-and-strings []
  (highlight
    ;;{{
      > 'Vogon
      Vogon
      > '|and now with hyperspace bypasses|
      |and now with hyperspace bypasses|
      > '"Don't Panic."
      "Don't Panic."
      > (list 68 111 110 39 116 32 80 97 110 105 99 46)
      "Don't Panic."
      >
    ;;}}
    ))

(defn bit-pack []
  (highlight
    ;;{{
      > (set red 2)
      2
      > (set green 61)
      61
      > (set blue 20)
      20
      > (binary
          (red (size 5))
          (green (size 6))
          (blue (size 5)))
      #B(23 180)
      >
    ;;}}
    ))

(defn bit-unpack []
  (highlight
    ;;{{
      > (let (((binary (r (size 5)) (g (size 6)) (b (size 5)))
               #b(23 180)))
             (: io format '"~p ~p ~p~n" (list r g b)))
      2 61 20
      ok
      >
      ;;}}
      ))

(defn lists-1 []
  (highlight
    ;;{{
      > (list 1 3 9 27)
      (1 3 9 27)
      > '(1 3 9 27)
      (1 3 9 27)
      > (: erlang length '(1 2 3 4 5 6 7))
      7
      > (: lists append '(1 2) '(3 4))
      (1 2 3 4)
      > (: lists append (list '(1 2) '(3 4) '(5 6)))
      (1 2 3 4 5 6)
      >
      ;;}}
      ))

(defn lists-2 []
  (highlight
    ;;{{
      > (car '(1 2 3 4 5 6))
      1
      > (cdr '(1 2 3 4 5 6))
      (2 3 4 5 6)
      > (cadr '(1 2 3 4 5 6))
      2
      > (cddr '(1 2 3 4 5 6))
      (3 4 5 6)
      > (cons '(1 2 3) '(4 5 6))
      ((1 2 3) 4 5 6)
      >
      ;;}}
      ))

(defn records-1 []
  (highlight
    ;;{{
      (defrecord person
        name
        address
        age)
      ;;}}
  ))

(defn records-2 []
  (highlight
    ;;{{
      > (set ford
          (make-person name '"Ford Prefect"
                       address '"Betelgeuse Seven"
                       age 234))
      #(person "Ford Prefect" "Betelgeuse Seven" 234)
      >
      ;;}}
  ))

(defn records-3 []
  (highlight
    ;;{{
      > (person-name ford)
      "Ford Prefect"
      > (set ford
          (set-person-age ford 244))
      #(person "Ford Prefect" "Betelgeuse Seven" 244)
      > (person-age ford)
      244
      >
      ;;}}
  ))

(defn patterns-1 []
  (highlight
    ;;{{
      > (let (((tuple len status data) #(8 ok "Trillian")))
             (list len status data))
      (8 ok "Trillian")
      >
    ;;}}
    ))

(defn patterns-2 []
  (highlight
    ;;{{
      > (case data
          ((tuple len 'ok msg)
            (: io format '"~s seems good.~n" (list msg)))
          ((tuple len 'err msg)
            (: io format '"There's a problem with ~s.~n" (list msg)))
          ((tuple len 'warn msg)
            (: io format '"Be careful of ~s.~n" (list msg))))
      Be careful of Arthur.
      ok
      >
    ;;}}
    ))

(defn patterns-3 []
  (highlight
    ;;{{
      (cond ((?= (tuple len 'ok msg) data)
             (: io format '"~s seems good.~n" (list msg)))
            ((?= (tuple len 'err msg) data)
             (: io format '"There's a problem with ~s.~n" (list msg)))
            ((?= (tuple len 'warn msg) data)
             (: io format '"Be careful of ~s.~n" (list msg))))
    ;;}}
    ))


(defn patterns-4 []
  (highlight
    ;;{{
      (defun safety-check
        (('ok msg)
          (: io format '"~s seems good.~n" (list msg)))
        (('warn msg)
          (: io format '"There's a problem with ~s.~n" (list msg)))
        (('crit msg)
          (: io format '"Be careful of ~s.~n" (list msg))))
    ;;}}
    ))

(defn patterns-5 []
  (highlight
    ;;{{
      (defun safety-check ()
        (receive
          ((tuple 'ok item)
            (: io format '"~s is safe to approach.~n" (list item))
            (safety-check))
          ((tuple 'warn item)
            (: io format '"Approach ~s with extreme caution.~n" (list item))
            (safety-check))
          ((tuple 'crit item)
            (: io format '"Withdraw from ~s immediately!~n" (list item))
            (safety-check))))
    ;;}}
    ))

(defn macros-1 []
  (highlight
    ;;{{

    ;;}}
    ))

