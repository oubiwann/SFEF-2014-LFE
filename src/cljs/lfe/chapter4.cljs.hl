(ns lfe.chapter4
    (:require [hoplon.reveal :refer [notes bullet highlight quicklist]]
              [lfe.reveal :refer [chapter slide]]
              [lfe.sample-code :as sample-code]))

(defn slides []
  (chapter :title "Kicking the Tires"

    (slide :title "LFE?"
      (img :src "img/can-has-lfe.png"))

    (slide :title "NOW!")

    (slide :title "What Does It Look Like?"
      (bullet "Numbers and Arithmetic")
      (sample-code/numbers))

    (slide :title "What Does It Look Like?"
      (bullet "Atoms and Strings")
      (sample-code/atoms-and-strings))

    (slide :title "What Does It Look Like?"
      (bullet "Bit Packing")
      (sample-code/bit-pack))

    (slide :title "What Does It Look Like?"
      (bullet "Bit Unpacking")
      (sample-code/bit-unpack))

    (slide :title "What Does It Look Like?"
      (bullet "Lists")
      (sample-code/lists-1))

    (slide :title "What Does It Look Like?"
      (bullet "Lists")
      (sample-code/lists-2))

    (slide :title "What Does It Look Like?"
      (bullet "Records")
      (sample-code/records-1))

    (slide :title "What Does It Look Like?"
      (bullet "Records")
      (sample-code/records-2))

    (slide :title "What Does It Look Like?"
      (bullet "Records")
      (sample-code/records-3))

    (slide :title "What Does It Look Like?"
      (bullet "Pattern Matching - let")
      (sample-code/patterns-1))

    (slide :title "What Does It Look Like?"
      (bullet "Pattern Matching - case")
      (sample-code/patterns-2))

    (slide :title "What Does It Look Like?"
      (bullet "Pattern Matching - cond")
      (sample-code/patterns-3))

    (slide :title "What Does It Look Like?"
      (bullet "Pattern Matching - defun")
      (sample-code/patterns-4))

    (slide :title "What Does It Look Like?"
      (bullet "Pattern Matching - receive")
      (sample-code/patterns-5))

    (slide :title "What Does It Look Like?"
      (bullet "Macros")
      (sample-code/macros-1))

    (slide :title "What Does It Look Like?"
      (bullet "Macros")
      (table :width "100%"
        (tr
          (td :width "10%" "From this:")
          (td :width "40%"
            (sample-code/macros-2))
          (td :width "10%" "to this:")
          (td :width "40%"
            (sample-code/macros-3))
        )))

    (slide :title "Church Numerals"
      (sample-code/church-numerals))

    (slide :title "Async HTTP Request"
      (sample-code/async-http))

    (slide :title "Bidirectional Messages"
      (sample-code/messenger))

    (slide :title "What Does This Thing Run On?"
      (bullet "Erlang, of course."))

    (slide :title "What Does It Look Like?"
      (sample-code/erlang-lfe-macros))

    ))
